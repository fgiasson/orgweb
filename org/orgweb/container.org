#+property: header-args :results silent :comments link :mkdirp yes :eval no :tangle ../../orgweb/container.py

#+Title: Docker Containers Management

The =orgweb= command line application is fully autonomous. As soon as Docker is
installed locally, it can build images using the =Dockerfile=, create new
containers, delete containers, etc.

* Imports

We use thew [[https://github.com/docker/docker-py][python-py]] project.

#+begin_src python
import docker
import os
from docker.errors import ImageNotFound, NotFound
#+end_src

* Initialize Docker

Initialize the docker object from the computer's environment.

#+begin_src python
docker = docker.from_env()
#+end_src

* Package Directory

=orgweb= package does contain the Dockerfiler used to create the Docker image
necessary for OrgWeb. We need to get the actual folder, on the file system of
the packge to point Docker to the Dockerfile to use to create the image.

#+begin_src python
def get_package_directory():
    # Get the path of the current script
    current_script_path = os.path.realpath(__file__)

    # Get the directory of the current script
    current_directory = os.path.dirname(current_script_path)

    return current_directory
#+end_src

* Images Utility Functions

Utility functions build images and check if a given image exists in the current
Docker environment.

If the user wants to recreate the image, he simply has to delete it using
Docker, and then the next time he will run =orgweb=, then it will be recreated
automatically using this function.

#+begin_src python
def build_image(img: str='localbuild:orgweb') -> None:
    """Build the orgweb image from the Dockerfile. Returns <image, logs>"""
    image, logs = docker.images.build(path=get_package_directory(), tag=img, rm=True)
    return image, logs

def image_exists(img: str='localbuild:orgweb') -> bool:
    """Check if the orgweb image exists in the Docker environment"""
    try:
        docker.images.get(img)
        return True
    except ImageNotFound:
        return False
#+end_src

* Containers Utility Functions

Series of utility functions to create and manage Docker containers. Every time a
=orgweb= command is executed, a container is created, the operation is executed,
and then the container is deleted.

#+begin_src python
def create_container(volume: dict, container: str='orgweb', img:
                     str='localbuild:orgweb') -> None:
    """Create the orgweb container from the orgweb image"""
    return docker.containers.run(img,
                                 detach=True,
                                 tty=True,
                                 stdin_open=True,
                                 name=container,
                                 volumes=volume)

def container_exists(container: str='orgweb') -> bool:
    """Check if the orgweb container exists in the Docker environment"""
    try:
        docker.containers.get(container)
        return True
    except NotFound:
        return False

def container_running(container: str='orgweb') -> bool:
    """Check if the orgweb container is running in the Docker environment"""
    try:
        if docker.containers.get(container).status == 'running':
            return True
        else:
            return False
    except NotFound:
        return False

def delete_container(container: str='orgweb') -> None:
    """Delete the orgweb container from the Docker environment"""
    docker.containers.get(container).remove(force=True)
#+end_src
